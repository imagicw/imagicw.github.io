<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Λ.W.log</title>
        <link>https://x.awo.design/posts/</link>
        <description>所有文章 | Λ.W.log</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>imagicw@hotmail.com (imagicw)</managingEditor>
            <webMaster>imagicw@hotmail.com (imagicw)</webMaster><lastBuildDate>Wed, 26 Jan 2022 20:20:00 &#43;0800</lastBuildDate><atom:link href="https://x.awo.design/posts/" rel="self" type="application/rss+xml" /><item>
    <title>《Yellow》Cover by Red Nose</title>
    <link>https://x.awo.design/2022/01/yellow-cover/</link>
    <pubDate>Wed, 26 Jan 2022 20:20:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2022/01/yellow-cover/</guid>
    <description><![CDATA[<div class="bilibili"><iframe src="//player.bilibili.com/player.html?bvid=BV15L4y1t7Yi&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>

<p>Red Nose 的由来是因为这支 MV，因为当时在林子里拍摄，风很大，篝火火力全开也无法使我们暖和，在 NG 了几遍之后，大家也都冻成了红鼻子😂。</p>
]]></description>
</item><item>
    <title>2021年年度总结</title>
    <link>https://x.awo.design/2022/01/annual-report-2021/</link>
    <pubDate>Wed, 05 Jan 2022 21:55:30 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2022/01/annual-report-2021/</guid>
    <description><![CDATA[<p>一年真的很快就过去了，其实时间一直在往前，而回归的月份让人误以为又是一个重新开始。</p>
<p>2021年总体来说差强人意，阅读没有持续，日语一开始还是比较积极地在学习的，后来因为程序开发占用掉了学习时间，四季度基本上搁置至今，也许今年应该找一个老师，就像架子鼓一样。</p>
<p>一整年的感觉就是时间不够用，下半年明显感觉到缺少休息带来的身体方面的酸痛，肩颈背变得僵硬。2022年还是需要劳逸结合，时间方面也要合理规划。</p>
<h2 id="回顾">回顾</h2>
<p>今年年尝试了总体策划一场活动，在过程中遇到了任务分配不合理，人员没有充分利用，时间规划不清晰的问题，好在最后活动相较顺利的举办，也算是一次经验累积吧。</p>
<p>得益于上半年的计算机基础课的学习，在公司信息化平台其他模块开发的时候，运用了一些学到的知识：抽象、递归等，深知对所学知识还需要充分消化，在2022年应该还需要结合实际来运用这些知识。</p>
<h3 id="全年完成的计划">全年完成的计划：</h3>
<ul>
<li><i class="far fa-check-square fa-fw"></i> 33节架子鼓学习</li>
<li><i class="far fa-check-square fa-fw"></i> 健身</li>
<li><i class="far fa-check-square fa-fw"></i> 计算机科学基础课</li>
<li><i class="far fa-check-square fa-fw"></i> 日语学习 7课 （勉强算吧）</li>
</ul>
<h3 id="未完成的计划">未完成的计划：</h3>
<ul>
<li><i class="far fa-square fa-fw"></i> 阅读</li>
<li><i class="far fa-square fa-fw"></i> 吉他</li>
</ul>
<h3 id="项目完成情况">项目完成情况：</h3>
<ul>
<li><i class="far fa-check-square fa-fw"></i> 100% 检针模块</li>
<li><i class="far fa-square fa-fw"></i> 40% 的海外订柜模块</li>
</ul>
<h2 id="期许">期许</h2>
<p>2022年，希望自己能够坚持阅读，坚持做好一两件重要（重大）的事、分清主次，能够做到独立思考。</p>
<p>继续加油。</p>
]]></description>
</item><item>
    <title>iOS15 的深度学习与隐私</title>
    <link>https://x.awo.design/2021/11/ios15-machine-learning/</link>
    <pubDate>Tue, 23 Nov 2021 20:22:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2021/11/ios15-machine-learning/</guid>
    <description><![CDATA[<p>上周日晚上去上网球课，刚上车收到手机弹出的 Siri 建议，点开随即进入地图应用并且给我规划好去网球场的路线，很不巧，那天下雨，所以没有去室外场地而是室内场地。</p>
<p>不知道是 iOS 15 加强了这方面的功能，还是原本 iOS 14 也有。反正，现在这个版本的 Siri 建议聪明了很多。</p>
<p>系统会根据使用者的习惯，会在你早上上车时候告诉你去公司需要多长时间，并给你选出 2 至 3 条合适的路线；会在你复制了链接后建议你用 Safari 打开链接；会告诉你在某个时间点你经常会打开什么 App，你现在是否要打开？</p>
<p>Siri 就从一开始呆萌的只会搜索网络结果及跟你回几句嘴开始变成了一个智能小管家，这么几年的深度学习的确起了效果。</p>
<p>在某些方面上，我也开始依赖起这个小管家。</p>
<p>但有时想一想，这样的数据很隐私，何时在何地你会做什么事情。若这样的数据被泄漏、盗取，就可以精准定位用户画像，甚至可以跟踪到具体位置。</p>
<p>科技带来便利的同时，也同样暴露了隐私。</p>
<p>好在现在科技公司都在隐私方面下功夫，苹果推出了专门的 Privacy 页面，用以了解账户所有的数据信息，也在新版本的 iOS 系统里增加了隐私报告。</p>
<p>希望这些隐私数据能够脱敏，在给用户提供个性化建议的同时，也不会暴露用户本身。</p>
<p>科技是好，但也还有生活，也许有时候离开科技，才是自由。</p>
]]></description>
</item><item>
    <title>《大家的日本语》学习笔记 - 助词 &amp; 副词</title>
    <link>https://x.awo.design/2021/09/mina-no-nihonngo-particle/</link>
    <pubDate>Sun, 05 Sep 2021 18:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2021/09/mina-no-nihonngo-particle/</guid>
    <description><![CDATA[<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>例句中符号说明<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>～ 替代词汇及句子</li>
<li>ー 替代数字</li>
<li>[    ] 括号中的语句可以省略</li>
<li>(    ) 括号中为其他表达方式</li>
</ul>
</div>
        </div>
    </div>
<p><em>笔记更新至第7课</em></p>
<hr>
<h2 id="助词的省略">助词的省略</h2>
<p>在会话中，当从前后关系就可以明白语意时，助词可以省略。</p>
<blockquote>
<p>このスプーン[は]、すてきですね。</p>
<p>コーヒー[を]、もう一杯いかがですか。</p>
</blockquote>
<hr>
<h2 id="助词-は">助词 は</h2>
<p>助词「は」读作「わ」</p>
<hr>
<h2 id="助词-の">助词 の</h2>
<h3 id="名词sub1sub-の-名词sub2sub">名词<sub>1</sub> の 名词<sub>2</sub></h3>
<ul>
<li>名词<sub>1</sub> 表示 名词<sub>2</sub> 的属性。
<ul>
<li>ミラーさん は IMC の 社員 です。</li>
</ul>
</li>
<li>名词<sub>1</sub> 来说明 名词<sub>2</sub> 与什么事物有关。
<ul>
<li>これ は コンピョーター の 本 です。</li>
</ul>
</li>
<li>名词<sub>1</sub> 表示 名词<sub>2</sub> 的所属/产地。
<ul>
<li>これ は 私 の 本 です。</li>
<li>これ は 日本 の コンピョーター です。</li>
</ul>
</li>
</ul>
<h3 id="代替名词">代替名词</h3>
<blockquote>
<p>あれ は 誰 の 鞄 ですか。</p>
<blockquote>
<p>佐藤さんのです。</p>
</blockquote>
</blockquote>
<p>在回答时，「の」替代了问句中出现的名词「鞄」，「の」放在「佐藤」后面相当于省略了「鞄」。<strong>「の」可以用于替代物品，不可用来替代人。</strong></p>
<blockquote>
<p>この 鞄 あなたの ですか。</p>
<blockquote>
<p>　いいえ、私 の じゃありません。</p>
</blockquote>
</blockquote>
<blockquote>
<p>ミラーさんは IMC の 社員 ですか。</p>
<blockquote>
<p>✔️ はい、IMC の 社員 です。</p>
<p>❌ <del>はい、IMC の です。</del></p>
</blockquote>
</blockquote>
<hr>
<h2 id="助词-に">助词 に</h2>
<h3 id="名词时间--に--动词">名词（时间） + に + 动词</h3>
<p>在表示时间的名词后加「に」，表示动作进行的时间</p>
<blockquote>
<p>７時２分 に　日本へ来ました。</p>
</blockquote>
<p>以下表示时间的名词不能加「に」：</p>
<p><code><strong><ruby>今日<rt>きょう</rt></ruby></strong></code> <code><strong><ruby>明日<rt>あした</rt></ruby></strong></code>　<code><strong><ruby>明後日<rt>あさって</rt></ruby></strong></code> <code><strong><ruby>昨日<rt>きのう</rt></ruby></strong></code> <code><strong><ruby>一昨日<rt>おととい</rt></ruby></strong></code> <code><strong><ruby>今朝<rt>けさ</rt></ruby></strong></code> <code><strong><ruby>今晩<rt>こんばん</rt></ruby></strong></code> <code><strong><ruby>今<rt>いま</rt></ruby></strong></code> <code><strong><ruby>毎朝<rt>まいあさ</rt></ruby></strong></code> <code><strong><ruby>毎晩<rt>まいばん</rt></ruby></strong></code> <code><strong><ruby>毎日<rt>まいにち</rt></ruby></strong></code> <code><strong><ruby>先週<rt>せんしゅう</rt></ruby></strong></code> <code><strong><ruby>今週<rt>こんしゅう</rt></ruby></strong></code> <code><strong><ruby>来週<rt>らいしゅう</rt></ruby></strong></code> <code>いつ</code> <code><strong><ruby>先月<rt>せんげつ</rt></ruby></strong></code> <code><strong><ruby>今月<rt>こんげつ</rt></ruby></strong></code> <code><strong><ruby>来月<rt>らいげつ</rt></ruby></strong></code> <code><strong><ruby>今年<rt>ことし</rt></ruby></strong></code> <code><strong><ruby>来年<rt>らいねん</rt></ruby></strong></code> <code><strong><ruby>去年<rt>きょねん</rt></ruby></strong></code> 等。</p>
<blockquote>
<p>昨日　勉強しました。</p>
</blockquote>
<p>这些表示时间的名词可加可不加： <code><strong><ruby>〜曜日<rt>〜ようび</rt></ruby></strong></code> <code><strong><ruby>朝<rt>あさ</rt></ruby></strong></code> <code><strong><ruby>昼<rt>ひる</rt></ruby></strong></code> <code><strong><ruby>晩<rt>ばん</rt></ruby></strong></code> <code><strong><ruby>夜<rt>よる</rt></ruby></strong></code></p>
<h3 id="名词人--に--动词">名词（人） + に + 动词</h3>
<p>助词「に」表示接触点。</p>
<blockquote>
<p>友達　に　会います。 <code>语义上偏向去见朋友：我 =&gt; 朋友</code></p>
<p>友達　と　会います。 <code>语义上偏向两个人去约定的地方见面：我 =&gt; 场所 &lt;= 朋友</code></p>
<p>❌ <del>友達　を　会います。</del></p>
</blockquote>
<h3 id="名词sub1sub--に--名词sub2sub--动词">名词<sub>1</sub> + に + 名词<sub>2</sub> + 动词。</h3>
<p>动词分两种：</p>
<ul>
<li>一种是表示<strong>提供</strong>事物、信息的意思，需要有接受这些事物、信息的对象，这一对象用助词「に」来表示。(名词<sub>1</sub> 为受方时)
<ul>
<li>如 <code>「あげます」</code> <code>「かします」</code> <code>「おしえます」</code> 等。</li>
</ul>
</li>
<li>另外一种是表示<strong>得到</strong>事物、信息的意思，需要有提供这些事物、信息的对象，这一对象用助词「に」来表示，也可以用「から」来表示。(名词<sub>1</sub> 为授方时)
<ul>
<li>如 <code>「もらいます」</code>　<code>かります</code> <code>ならいます</code> 等。</li>
</ul>
</li>
</ul>
<blockquote>
<p>[私は]木村さん　に　花を　あげました。 <code>我给木村小姐送了花。</code></p>
<p>[私は]木村さん　に（から）　花を　もらいました。 <code>我收到了木村小姐送的花。</code></p>
</blockquote>
<h2 id="助词-ね">助词 ね</h2>
<h3 id="ね">〜ね</h3>
<p>表示说话人希望得到听话人的同意或说话人对某件事物加以确认、叮嘱的语气。</p>
<blockquote>
<p>毎日１０時まで勉強します。</p>
<blockquote>
<p>大変です ね。</p>
</blockquote>
</blockquote>
<h3 id="名词场所--に--动词表示移动的">名词（场所） + に + 动词（表示移动的）</h3>
<p>在表达移动到达的场所时，用助词「に」。与助词「へ」的差别在于，「へ」是表达移动方向，「に」是表达移动到这个场所。</p>
<blockquote>
<p>私は学校　に　行きます。</p>
</blockquote>
<hr>
<h2 id="助词-へ">助词 へ</h2>
<p>助词「へ」读作「え」</p>
<h3 id="名词场所--へ--动词表示移动的">名词（场所） + へ + 动词（表示移动的）</h3>
<p>使用表示移动的词时，移动方向用助词助词「へ」表示。</p>
<blockquote>
<p>京都　へ　行きます。</p>
<p>うち　へ　帰ります。</p>
</blockquote>
<hr>
<h2 id="助词-と">助词 と</h2>
<h3 id="名词sub1sub--と--名词sub2sub">名词<sub>1</sub> + と + 名词<sub>2</sub></h3>
<ul>
<li>名词并列，在之间用「と」连接，表示名词<sub>1</sub>和名词<sub>2</sub>。</li>
</ul>
<blockquote>
<p>　銀行の休みは土曜日　と　日曜日　です。</p>
</blockquote>
<h3 id="名词人动物--と--动词">名词（人/动物） + と + 动词</h3>
<p>表示与自己一起行动的人或动物。</p>
<blockquote>
<p>家族　と　日本へ来ました。</p>
</blockquote>
<p>单独行动时，要用「一人で」且不用助词「と」。</p>
<blockquote>
<p>一人で　東京へ行きます。</p>
</blockquote>
<hr>
<h2 id="助词-で">助词 で</h2>
<h3 id="名词交通工具--で--动词">名词（交通工具） + で + 动词。</h3>
<p>助词「で」表示手段、方法，接在表示交通工具的名词之后，表示与动词一起使用。</p>
<blockquote>
<p>　電車　で　行きます。</p>
</blockquote>
<p><strong>徒步行走用「<strong><ruby>歩<rt>ある</rt></ruby></strong>いて」且不用接助词「で」。</strong></p>
<blockquote>
<p>駅から歩いて帰りました。</p>
</blockquote>
<h3 id="名词场所--で--动词">名词（场所） + で + 动词。</h3>
<p>接在场所后的助词「で」表示发生的场所。</p>
<blockquote>
<p>駅　で　新聞を買います。</p>
</blockquote>
<h3 id="名词工具手段--で--动词">名词（工具/手段） + で + 动词。</h3>
<p>助词「で」用来表示方法、手段、工具。</p>
<blockquote>
<p><strong><ruby>箸<rt>はし</rt></ruby></strong>で食べます。 ｜ 用筷子吃饭。</p>
</blockquote>
<hr>
<h2 id="助词-を">助词 を</h2>
<h3 id="名词--を--动词他动词">名词 + を + 动词（他动词）</h3>
<p>他动词的宾语用助词「を」表示。</p>
<blockquote>
<p>ジュース　を　飲みます。</p>
</blockquote>
<p><em>注：「を」只用来表示助词。</em></p>
<h3 id="名词--を--动词">名词 + を + 动词</h3>
<p>表示动作作用对象。</p>
<p>动词是「します」时，可以接在很多名词之后，使其作为宾语。意思是表示做该名词所表示的内容。</p>
<blockquote>
<p>スッカー　を　します。 <code>踢足球</code></p>
<p>パーティー　を　します。 <code>举办晚会。</code></p>
<p><strong><ruby>宿題<rt>しゅくだい</rt></ruby></strong>　を　します。 <code>做作业。</code></p>
</blockquote>
<hr>
<h2 id="助词-よ">助词 よ</h2>
<p>接在词尾，用于将对方不知道的事情或说话人自己的判断等告诉对方。</p>
<blockquote>
<p>この電車は<strong><ruby>甲<rt>こう</rt></ruby></strong><strong><ruby>子<rt>し</rt></ruby></strong><strong><ruby>園<rt>えん</rt></ruby></strong>へ行きますか。</p>
<blockquote>
<p>いいえ、行きません。次の「<strong><ruby>普<rt>ふ</rt></ruby></strong><strong><ruby>通<rt>つう</rt></ruby></strong>」です よ。</p>
</blockquote>
</blockquote>
<h2 id="副词-ときぢき">副词 ときぢき</h2>
<p>修饰后面的动词或新的动词，与前句无关。意思是「有时候」。</p>
<blockquote>
<p>うちで本を読みます。ときどき図書館へ行きます。</p>
</blockquote>
<h2 id="副词-もう">副词 もう</h2>
<h3 id="もう--动词ました">もう + 动词ました。</h3>
<p>「もう」是「已经」的意思，与「动词ました」一起使用，表示「动词ました」已经结束。</p>
<p>在回答时，如果行为已经结束了，进行肯定回答「はい、もう 动词 ました。」；如果行为尚未结束，进行否定回答「いいえ、动词て いません。」或者「いいえ、まだです。」。</p>
<blockquote>
<p>もう昼ご飯を食べましたか。</p>
<blockquote>
<p>[肯定回答] はい、[もう]食べました。</p>
<p>[否定回答] いいえ、まだです。(いいえ、食べていません。)</p>
<p>[否定回答] ❌ <del>いいえ、まだ食べません。(いいえ、食べませんでした。)</del></p>
</blockquote>
</blockquote>
]]></description>
</item><item>
    <title>《大家的日本语》学习笔记 - 文法</title>
    <link>https://x.awo.design/2021/09/mina-no-nihonngo-grammar/</link>
    <pubDate>Sun, 05 Sep 2021 18:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2021/09/mina-no-nihonngo-grammar/</guid>
    <description><![CDATA[<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>例句中符号说明<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>～ 替代词汇及句子</li>
<li>ー 替代数字</li>
<li>[    ] 括号中的语句可以省略</li>
<li>(    ) 括号中为其他表达方式</li>
</ul>
</div>
        </div>
    </div>
<p><em>笔记更新至第7课</em></p>
<hr>
<p>助词「は」读作「わ」</p>
<h2 id="肯定句">肯定句</h2>
<h3 id="名词sub1sub--助词-は--名词sub2sub--です">名词<sub>1</sub> + 助词 は + 名词<sub>2</sub> + です。</h3>
<blockquote>
<p>私　は　マイク・ミラー　です。</p>
</blockquote>
<ul>
<li>名词<sub>1</sub> + 助词 も + 名词<sub>2</sub> + です / ですか。</li>
</ul>
<p>「も」用于将相同的事物作为前提加以陈述时。</p>
<blockquote>
<p>サントスさん　は　会社員　です。</p>
<blockquote>
<p>ワンさん　も　会社員　です。</p>
</blockquote>
</blockquote>
<h3 id="名词sub1sub--は--场所--です">名词<sub>1</sub> + は + 场所 + です。</h3>
<p>用来表示场所、物体或人所在的地方。</p>
<blockquote>
<p>お手洗い　は　あそこ　です。</p>
<p>電話　は　２階　です。</p>
</blockquote>
<h3 id="名词场所sub1sub--へ--行きます--来ます--帰ります">名词（场所）<sub>1</sub> + へ + 行きます / 来ます / 帰ります。</h3>
<p>使用表示移动的词时，移动方向用助词「へ」（读作「え」）表示。</p>
<blockquote>
<p>京都　へ　行きます。</p>
<p>日本　へ　きました。</p>
<p>うち　へ　帰ります。</p>
</blockquote>
<h3 id="时间--です">时间 + です。</h3>
<ul>
<li>今９時１５分　です。</li>
</ul>
<p>询问时间在「時」「ふん」之前加「なん」。</p>
<ul>
<li>「分」读法：
<ul>
<li>「ふん」：前面数字是 <code>2</code>、<code>5</code>、<code>7</code>、<code>9</code> 时。</li>
<li>「ぷん」：前面数字是 <code>1</code>「いっ」、<code>3</code>、<code>4</code>、<code>6</code>「るっ」、<code>8</code>「はっ」、<code>10</code>「じゅっ（じっ）」 时。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="否定句">否定句</h2>
<h3 id="名词sub1sub--助词-は--名词sub2sub--じゃではありません">名词<sub>1</sub> + 助词 は + 名词<sub>2</sub> + じゃ(では)ありません。</h3>
<p><code>ではありません</code> 是正式场合的用法。</p>
<p>「じゃありません」和「ではありません」是「です」的否定形式。</p>
<blockquote>
<p>私　は　学生　じゃありません。</p>
<p>私　は　医者　ではありません。</p>
</blockquote>
<h3 id="疑问词--も--行きません">疑问词 + も + 行きません。</h3>
<p>对疑问词所问范畴内的一切全部加以否定时，在疑问词后加「も」，且动词使用其否定形。</p>
<blockquote>
<p>どこ[へ]　も　いきません。　/ 哪儿也不去。</p>
<p>何　も　食べません。 / 什么也不吃。</p>
<p>誰もき　ま　せんでした。 / 谁也没来。</p>
</blockquote>
<hr>
<h2 id="疑问句">疑问句</h2>
<h3 id="一般疑问句">一般疑问句</h3>
<h4 id="名词sub1sub--助词-は--名词sub2sub--ですか">名词<sub>1</sub> + 助词 は + 名词<sub>2</sub> + ですか。</h4>
<blockquote>
<p>マイク・ミラーさん　は　会社員　ですか。</p>
<blockquote>
<p>「肯定回答」はい、[私は] 会社員です。</p>
<p>「否定回答」いいえ、[私は]　会社員　じゃありません。</p>
</blockquote>
</blockquote>
<ul>
<li>そうです / 違います</li>
</ul>
<p>在名词句中，在回答询问是否的疑问句时，使用以下回答。</p>
<blockquote>
<p>それ　は　辞書 ですか。</p>
<blockquote>
<p>「肯定回答」はい、そうです。 / 「简单回答」 そう。</p>
<p>「否定回答」いいえ、違います。 / 「或者直接告诉正确答案」いいえ、本です。</p>
</blockquote>
</blockquote>
<ul>
<li>そうですか</li>
</ul>
<p>在听到新信息时，用这句话来表示知道了（有点不太确定的那种感觉）。句尾语调为降调。</p>
<blockquote>
<p>この傘はあなたのですか。</p>
<blockquote>
<p>いいえ、違います。佐藤さんのです。</p>
</blockquote>
<p>そうですか。</p>
</blockquote>
<ul>
<li>〜か</li>
</ul>
<p>「か」是说话人在得到自己所不知道的新信息之后，表示认可、理解时的表达方式。这与「そうですか」的「か」用法相同。</p>
<blockquote>
<p>日曜日京都へ行きました。</p>
<blockquote>
<p>京都ですか。いいですね。</p>
</blockquote>
</blockquote>
<ul>
<li>そうですね</li>
</ul>
<p>对对方说的事情表示赞同或有同感。</p>
<p>「そうですか」是说话人在得到新信息之后表示认可、理解。</p>
<blockquote>
<p>明日　は　日曜日　ですね。</p>
<blockquote>
<p>あ、そうですね。</p>
</blockquote>
</blockquote>
<h4 id="名词--は--疑问词--ですか">名词 + は + 疑问词 + ですか。</h4>
<blockquote>
<p>お手洗い　は　どこ　ですが。</p>
<p>エレベーター　は　どちら　ですか。</p>
</blockquote>
<h4 id="何なに-をしますか"><strong><ruby>何<rt>なに</rt></ruby></strong> を　しますか。</h4>
<p>询问要做什么。</p>
<blockquote>
<p>月曜日　何　をしますか。</p>
<blockquote>
<p>京都へ行きます。</p>
</blockquote>
</blockquote>
<h4 id="动词--ませんか">动词 + ませんか。</h4>
<p>表示邀请听话人一起来做某事。</p>
<blockquote>
<p>一緒に　京都へ行きませんか。 ｜ 一起去京都吗？（不一起去京东吗？）</p>
</blockquote>
<h4 id="动词--ましょう">动词 + ましょう。</h4>
<p>表示积极地提议、邀请。也可以表示积极的响应对方的提议、邀请。</p>
<blockquote>
<p>ちょっと休み　ましょう。</p>
<p>一緒に昼ごはんを食べませんか。</p>
<blockquote>
<p>ええ、食べましょう。</p>
</blockquote>
</blockquote>
<p><em>注：「动词ませんか」和「动词ましょう」同为邀请对方的表达方式，前者更加尊重对方。</em></p>
<p>####　词/句 + は + 〜ごで + なんですか。</p>
<p>询问某个词或者句子用～语怎么说。</p>
<blockquote>
<p>「ありがとう」は　英語　何ですか。</p>
<blockquote>
<p>「Thank You」です。</p>
</blockquote>
</blockquote>
<h3 id="选择疑问句">选择疑问句</h3>
<h4 id="かか">〜か、〜か。</h4>
<p>两个或两个以上的并列疑问句进行选择回答的疑问句。此类疑问句回答不用加上「はい」或「いええ」，直接回复选择。</p>
<blockquote>
<p>それは「９」です　か、「７」です　か。</p>
<blockquote>
<p>「９」です。</p>
</blockquote>
</blockquote>
<hr>
<h2 id="疑问词">疑问词</h2>
<h3 id="どこ--どちら">どこ / どちら</h3>
<p>「どこ」是询问场所的疑问词。
「どちら」是询问方向的疑问词，也用于询问场所，语气较「どこ」郑重。</p>
<h3 id="いつ">いつ</h3>
<p>询问时间时，除了「<strong><ruby>何時<rt>なんじ</rt></ruby></strong>」等询问词之外，还可以使用「いつ」，「いつ」之后不接助词「に」。</p>
<blockquote>
<p>いつ　日本　へ　来ましたか。</p>
<blockquote>
<p>３月２５日　に　来ました。</p>
</blockquote>
</blockquote>
<h3 id="何">何</h3>
<p>「なに」和「なん」意思相同，但以下情况使用「なん」；</p>
<ul>
<li>后续单词的词头为「た」「だ」「な」时。
<ul>
<li>それは　なん　ですか。</li>
<li>なん　の本ですか。</li>
</ul>
</li>
</ul>
<p><em>注：「なんで」除了可以询问手段、方法之外，还可以用于询问理由。<strong>想明确表示在询问手段、方法，可以用「なにで」。</strong></em></p>
<ul>
<li>带有量词时
<ul>
<li>テレーズちゃんは　なん　歳ですか。</li>
</ul>
</li>
</ul>
<p>以上两种以外情况使用「なに」。</p>
<hr>
<h2 id="其他">其他</h2>
<h3 id="名词sub1sub--から--名词sub2sub--まで">名词<sub>1</sub> + から + 名词<sub>2</sub> + まで</h3>
<p>「から」表示起点（时间、场所），「まで」表示重点（时间、场所），他们经常一起使用，也可以单独使用。</p>
<blockquote>
<p>銀行　は　９時から　３時まで　です。</p>
</blockquote>
]]></description>
</item><item>
    <title>一些琐事</title>
    <link>https://x.awo.design/2021/04/studying-training-learning/</link>
    <pubDate>Fri, 02 Apr 2021 16:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2021/04/studying-training-learning/</guid>
    <description><![CDATA[<p>今天突然在想一个问题「完美和不完美」。</p>
<p>在很多时候我都在追求一定的完美，在选择学习资料上、数据整理方案、程序的算法逻辑等等，总会考虑很多，是否有不完美的地方，这固然是一件好事情，但也有时候无论如何也无法达到真正意义上的完美，总有不完美的地方。</p>
<p>最近在上王垠老师的课，他的观点很多方面都让我有了新的认知。以前学音乐觉得音乐是完美的语言，现在看其实也有很多不完美的地方，十二平均律也不是最完美的韵律。</p>
<p>说到上课，我惊讶于王垠老师可以将知识点用很容易理解的方式讲出来，抽丝剥茧，入门者很容易理解，但内容又不是浅层次的，课后练习很容易看出来是经过认真设计的，能够深入去理解知识点的。</p>
<p>今天刷到微博，大意就是在交易市场上大家都愿意亏损当学费，而不愿意花几万元去学习技术。花几万元去学习技术，我觉得门槛虽然高一点，但是能够系统的学习到知识（当然不是说费用高的就是好的），我认为这样的学费其实是很便宜的。</p>
]]></description>
</item><item>
    <title>《稻香》乐队Cover</title>
    <link>https://x.awo.design/2021/03/dao-xiang-cover/</link>
    <pubDate>Tue, 16 Mar 2021 16:23:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2021/03/dao-xiang-cover/</guid>
    <description><![CDATA[<div class="bilibili"><iframe src="//player.bilibili.com/player.html?bvid=BV17o4y1R76j&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>

<p>原本计划 2020 年要在公司层面寻找人员组成公司的乐队的，后来因为疫情搁置了，年底的时候分公司有小伙伴告诉我她学了 Bass，正好大冰龙带着他吉他 Demo 想要来投稿公众号，一拍即合，干脆整个乐队吧。</p>
<p>大家一起排练、改编和录音，于是就有了周杰伦《稻香》的 Cover。</p>
]]></description>
</item><item>
    <title>2021年年度计划</title>
    <link>https://x.awo.design/2021/02/annual-plan-2021/</link>
    <pubDate>Sun, 14 Feb 2021 15:37:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2021/02/annual-plan-2021/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/feature.jpg" referrerpolicy="no-referrer">
            </div><h2 id="工作计划">工作计划</h2>
<p>今年的工作重心在分公司的信息化建设，一方面是业务系统的系统化的推进，另外一方面是自研的信息系统的开发。前者要抓紧推进的，是工作的重心。后者不应该占据自身太多的时间，在时间较为空余时进行开发，也可借助开源平台进行二次开发以节约时间成本。</p>
<p>文化建设方面，<del>公众号主要由 Jackson 负责打理</del>（基本还是我在弄😓），我负责每个月计划以及方向的制定，其他方面仍然需要保持高度的敏感性，提前准备。</p>
<p>工会的文体活动去年已经定好计划，按照预计时间提前准备。</p>
<p>今年需要摒弃细微末节，将时间用在重要的事情上去。同时还需要发掘相关方面的人才，使队伍壮大起来。</p>
<h2 id="学习计划">学习计划</h2>
<p>今年在学习方面应该要比去年更加进步一点，这不仅仅只在深度方面。所以今年我打算着重学习日语、架子鼓、吉他。其余例如开发、音乐制作、视频拍摄则依据实际需要来选择学习内容。阅读今年依然是必不可少的一环。</p>
<h3 id="阅读-未完成">阅读 （未完成）</h3>
<p>今年计划阅读 10本书，同一类型书籍最多不超过3本。计划表以及进度会在第一本书阅读开始时更新。</p>
<table>
<thead>
<tr>
<th style="text-align:left">分类</th>
<th style="text-align:center">数量</th>
<th style="text-align:center">完成</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">小说</td>
<td style="text-align:center">3本</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">历史</td>
<td style="text-align:center">2本</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">传记</td>
<td style="text-align:center">2本</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">指导</td>
<td style="text-align:center">2本</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">哲学</td>
<td style="text-align:center">1本</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>阅读进度：</p>
<table>
<thead>
<tr>
<th style="text-align:left">书名</th>
<th style="text-align:center">分类</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">完成时间</th>
<th style="text-align:center">耗时</th>
<th style="text-align:center">状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">学会提问</td>
<td style="text-align:center">指导</td>
<td style="text-align:center">2021.02.18</td>
<td style="text-align:center">?</td>
<td style="text-align:center">-</td>
<td style="text-align:center">▶️ 进行</td>
</tr>
<tr>
<td style="text-align:left">丑陋的中国人</td>
<td style="text-align:center">历史（不能算历史）</td>
<td style="text-align:center">2021.03.16</td>
<td style="text-align:center">2022.01.07</td>
<td style="text-align:center">7小时23分</td>
<td style="text-align:center">✅ 完成</td>
</tr>
</tbody>
</table>
<h3 id="日语-未完成">日语 （未完成）</h3>
<p>日语计划今年至少要完成 N3 的考试，最好是能够考到 N2。有必要的话，会找老师上课。</p>
<p>自学计划是打算将《大家的日本语》两册书学完，根据学习的情况再看是否需要《标准日本语》作为补充。</p>
<p>考试报名时间弄错了，没报上。目前只完成到初级的第七课。</p>
<h3 id="计算机科学基础课-完成">计算机科学基础课 （完成）</h3>
<p>今年报了王垠老师的《计算机科学基础课》，要将这课程内容好好吸收，希望能够理解课程的所有内容。</p>
<p>学完了，笔记以及练习还需要整理和消化。</p>
<p>虽然练习都做了出来，链表、树、解释器、类型检查还有 Parser 还需要加强理解，在实际案例中能够运用到这些内容。</p>
<h3 id="架子鼓-完成">架子鼓 （完成）</h3>
<p>年后先去检查耳朵，确保学习期间能够尽可能的保护耳朵「买了静音耳塞」。之后去报班。</p>
<p>5月9日报了一年的架子鼓班（50节课），我发现我练架子鼓蛮专注的，可能是因为在练歌？下次长时间练基本功的时候再来发表感想。</p>
<p>课程进度：32/50 （因为疫情，有几个月琴行停课）</p>
<p>已学内容：</p>
<ul>
<li>单跳 / 双跳 / 倚音 / 开合镲</li>
<li>《改变自己》《星空》《不再犹豫》《君が好きだと叫びたい》《Cold Pants》</li>
</ul>
<h3 id="吉他-未完成">吉他 （未完成）</h3>
<p>吉他完成指弹练习曲前12首，时间充足的情况下尽量能够多完成。</p>
<table>
<thead>
<tr>
<th style="text-align:left">曲目</th>
<th style="text-align:center">分类</th>
<th style="text-align:center">开始时间</th>
<th style="text-align:center">完成时间</th>
<th style="text-align:center">耗时</th>
<th style="text-align:center">状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">练习曲4</td>
<td style="text-align:center">练习曲</td>
<td style="text-align:center">2021.02.14</td>
<td style="text-align:center">2021.03.20</td>
<td style="text-align:center">9 hour</td>
<td style="text-align:center">✅ 完成</td>
</tr>
<tr>
<td style="text-align:left">练习曲5</td>
<td style="text-align:center">练习曲</td>
<td style="text-align:center">2021.03.21</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">▶️ 进行</td>
</tr>
</tbody>
</table>
<h3 id="乐队排练表演">乐队排练/表演</h3>
<ul>
<li><i class="far fa-check-square fa-fw"></i> 周杰伦《稻香》/ MV / 吉他 / 2021.02.05 / <a href="/2021/03/dao-xiang-cover/" rel="">📹 视频</a></li>
<li><i class="far fa-check-square fa-fw"></i> 伍佰《Last Dance》 / Live / 键盘 / 2021.02.14 / <a href="https://mp.weixin.qq.com/s/CRA_PAKAzO976wKwBjc0Hg" target="_blank" rel="noopener noreffer">📹 视频</a></li>
<li><i class="far fa-check-square fa-fw"></i> 五月天《星空》 / Live / 吉他 / 2021.04.09 / 无视频</li>
<li><i class="far fa-check-square fa-fw"></i> 五月天《星空》 / Live / 架子鼓 / 2021.08.14 / <a href="https://mp.weixin.qq.com/s/SEaeCNo8JyNfqjLvydFodw" target="_blank" rel="noopener noreffer">📹 视频</a> 现场收音，效果不是很好。另我的节奏也有点不太稳。</li>
<li><i class="far fa-check-square fa-fw"></i> Coldplay 《Yellow》 / MV / 架子鼓 / <a href="/2022/01/yellow-cover/" rel="">📹 视频</a></li>
</ul>
<h3 id="其他">其他</h3>
<p>开发、音乐制作、视频拍摄等会根据实际情况在此更新。</p>
<p>开发：</p>
<ul>
<li>拼柜模块</li>
<li>检针模块</li>
<li>海外订柜模块（开发中）</li>
</ul>
<h2 id="身心计划">身心计划</h2>
<p>这方面计划由健身私教、书法练习、情绪管理及自省组成。</p>
<p>健身是身体方面的强化；书法是心灵方面的洗涤；情绪的管理以及自省来改善不完美的自己。</p>
<h3 id="健身">健身</h3>
<ul>
<li>Phase One (total 44, ¥ 6,000)
<ul>
<li>02.22 ~ 02.28 / 3 courses</li>
<li>03.01 ~ 03.07 / 4 courses</li>
<li>03.08 ~ 03.14 / 3 courses</li>
<li>03.15 ~ 03.21 / 4 courses</li>
<li>03.22 ~ 03.28 / 1 courses</li>
<li>04.12 ~ 04.18 / 4 courses</li>
<li>04.19 ~ 04.25 / 3 courses</li>
<li>04.26 ~ 05.02 / 3 courses</li>
<li>05.03 ~ 05.09 / 2 courses</li>
<li>05.10 ~ 05.16 / 3 courses</li>
<li>05.17 ~ 05.23 / 4 courses</li>
<li>05.24 ~ 05.30 / 2 course 老师出差</li>
<li>05.31 ~ 06.06 / 2 courses</li>
<li>06.06 ~ 06.13 / 4 courses</li>
<li>06.14 ~ 06.20 / 2 courses 一期结束</li>
</ul>
</li>
</ul>
<hr>
<p>2021，不念过往，不问未来，珍惜现在，加油W.</p>
]]></description>
</item><item>
    <title>2020年年度总结</title>
    <link>https://x.awo.design/2021/01/annual-report-2020/</link>
    <pubDate>Fri, 15 Jan 2021 15:37:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2021/01/annual-report-2020/</guid>
    <description><![CDATA[<p>2020年虽然说是疫情年，但这一年依旧是忙碌的一年。</p>
<p>从年初网店运营以及产品的拍照，到六一活动的筹备，以及下半年的集装箱拼柜系统的开发，基本都是无缝衔接。</p>
<h2 id="自省">自省</h2>
<p>「Do One Thing Perfect」上半年践行的不是很好，拍照、修图、店铺装修以及运营每个部分都分散了我的精力，并不能专注于一件事，另外一方面在这个团队的协作方面存在了一些问题：</p>
<ul>
<li>大家都没有做网店的经验</li>
<li>由于我们主业是做B端客户的，大家对于做 C 端认为只是一个临时阶段</li>
<li>对于一些同事来说，做与不做或者效率高低对于 ta 没有直接影响。</li>
</ul>
<p>所以，当主业正常之后，大家都各自回归原来的岗位了，并没有产生出一个互联网销售团队。</p>
<p>下半年是信息化工作为主，在开发之初没有选择熟悉的架构，该用现代化的开发方式，选用了 JS 语言来开发。在前期花了不少功夫来快速入门 React, Antd Pro, Koa 以及 TypeORM。</p>
<p>选择现代化框架虽然是正确的，但是因为需要快速入门而研读各类手册及教程给了我不小的压力。所以在入门之后，就在边学习「全栈公开课2020」边进行程序开发。</p>
<p>第一版的系统在一个月内上线，虽然自己在开发系统时考虑了很多便利性的功能，但是因为业务仍需要重复工作将数据录入至系统，所以业务员使用的意愿不是很强烈。这反映出了前期的调研不够严谨和充分。这也导致第二版系统几乎要重做。</p>
<p><strong>严谨而充分的调研，会减少错误的劳动。</strong></p>
<p>2020年的计划完成情况较上一年好：</p>
<ul>
<li>阅读完成了 4本书，完成率 40%。</li>
<li>吉他完成了 1首练习曲，完成率 4.54%。</li>
<li>练字仅上半年坚持，持续了23小时。</li>
<li>健身从五月份开始，基本上完成了任务，一共上了 82节私教课。</li>
<li>全栈公开课完成了 3个章节</li>
</ul>
<p>阅读和练字有一方面原因是因为午休时间减少了，但主要原因依然是执行力不够。</p>
<p>全栈公开课本应该在12月底全部完成的，因为第二版的开发影响了进度，在2021年要全部学完的。</p>
<h2 id="plus">PLUS</h2>
<ul>
<li>加入了「公司工会文体组」</li>
<li>修复了「公司官网」的木马</li>
<li>喝醉了 2次</li>
</ul>
<h2 id="结语">结语</h2>
<p>这一年依旧是因为事情比较杂和多，对于一年的主题「Do One Thing Perfect」践行的不够理想，仅在下半年做的还可以，没有畏惧新事物带来的压力，持续学习和开发。在阅读、健身、学习方面完成的较好，练字及器乐方面完成的不够理想。总体来说今年算是及格吧。</p>
<p>在 2021年，摒弃一些细微末节，重心放在学习以及沟通方面的提升吧。</p>
<p>一生很短，遗憾很多，人生在不断失去，人生也在不断获得。未来的自己一定不要辜负现在你受到的伤痛，爱所爱的人，也要爱自己。</p>
]]></description>
</item><item>
    <title>全栈公开课2020学习笔记 03 - 用 NodeJS 和 Express 写服务端程序</title>
    <link>https://x.awo.design/2020/12/fullstackopen-nodejs-express/</link>
    <pubDate>Wed, 09 Dec 2020 17:30:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://x.awo.design/2020/12/fullstackopen-nodejs-express/</guid>
    <description><![CDATA[<h3 id="nodejs-与-express">Node.js 与 Express</h3>
<p>前端浏览器还不支持 JavaScript 的最新特性，所以在浏览器运行的代码是 <a href="https://babeljs.io/" target="_blank" rel="noopener noreffer">babel</a> 转译过的，而在后端运行 JavaScript 的情况是使用 Node ，而 Node 支持大部分最新的 JavaScript 特性，所以后端代码不需要转译。</p>
<p>npm 来源于 Node 生态，是管理 JavaScript 包的工具。</p>
<p>一般情况在终端使用 <code>node index.js</code> 即可启动项目，但最好的做法是在项目的 <code>package.json</code> 中定义脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nt">&#34;script&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;start&#34;</span><span class="p">:</span> <span class="s2">&#34;node index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后只要在项目根目录使用 <code>npm start</code> 即可启用项目。</p>
<h4 id="简易服务器">简易服务器</h4>
<p>该部分仅作了解即可，在实际项目中这样的方式太麻烦。主流的方式是使用例如 Express 这类的库。</p>
<p>新建一个项目，在根目录使用 <code>npm init</code> 来初始化项目，创建 <code>index.js</code> ：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">((</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">3001</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`服务器运行在 </span><span class="si">${</span><span class="nx">PORT</span><span class="si">}</span><span class="sb"> 端口`</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 <code>npm start</code> 即可启动服务器，通过浏览器即可访问 http://localhost:3001。</p>
<p>如服务器提供的数据是 json，需要将 <code>Content-Type</code> 改为 <code>application/json</code>。输出的数组需要进行 <code>JSON.stringify(array)</code> 处理。</p>
<p>Node.js 使用了 <a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener noreffer">CommonJS</a>，还不支持 ES6 模块，所以不能使用 <code>import http from 'http'</code>。</p>
<h4 id="web-and-express">Web and express</h4>
<p>在项目根目录安装 <code>npm install express</code>。因为使用了 <code>npm</code> 来安装，所以会自动在项目 <code>package.json</code> 添加 <code>express</code> 依赖：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;express&#34;</span><span class="p">:</span> <span class="s2">&#34;^4.17.1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>^4.17.1</code> 限制了该项目支持的 <code>express</code> 的最低版本。</p>
<p>让原先 <code>index.js</code> 使用 <code>express</code> 库。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">notes</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 定义路由
</span></span></span><span class="line"><span class="cl"><span class="c1">// 处理对应用 &#39;/&#39; 的 HTTP GET 请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// response 响应请求，返回 &lt;h1&gt;Hello World!&lt;/h1&gt;。express 会自动设置 Content-Type 为 text/html，状态码 200
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;&lt;h1&gt;Hello World!&lt;/h1&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 处理对应用 &#39;/api/notes&#39; 的 HTTP GET 请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// response 响应请求，返回 json 数据。express 会自动设置 Content-Type 为 application/json，状态码 200
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">notes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 服务器运行端口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">3001</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`服务器运行在 </span><span class="si">${</span><span class="nx">PORT</span><span class="si">}</span><span class="sb"> 端口`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="nodemon">nodemon</h4>
<p>通过使用 <code>nodemon</code>，可以使应用在开发过程中由于代码的修改而自动重启服务，从而避免每次修改完代码后都需要重新 <code>npm start</code> 项目。</p>
<p>通过 <code>npm install nodemon --save-dev</code> 在项目中添加开发依赖，会在 <code>package.json</code> 的开发依赖中定义。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;express&#34;</span><span class="p">:</span> <span class="s2">&#34;^4.17.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;nodemon&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.0.2&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>开发依赖是在开发时需要用到的而在生产环境中用不到的依赖。</p>
<p>使用方法还是在 <code>package.json</code> 的增加脚本，而后通过 <code>npm run dev</code> 来启动，这于 <code>start</code> 和 <code>test</code> 不同，需要在命令中加入 <code>run</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ..
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;start&#34;</span><span class="p">:</span> <span class="s2">&#34;node index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;dev&#34;</span><span class="p">:</span> <span class="s2">&#34;nodemon index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ..
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="rest">REST</h4>
<blockquote>
<p>在 RESTful thinking 中称为 resource。 每个 resource 都有一个相关联的 URL，这个 URL 是资源的唯一地址。</p>
<p>一个约定是结合 resource 类型名称和 resource 的唯一标识符来创建 resource 唯一的地址。</p>
</blockquote>
<p>假设根目录为 <code>/api</code>，那么笔记的集合则是 <code>/api/notes</code> ，单个笔记则是 <code>/api/notes/10</code>。</p>
<p>对资源又可以进行不同的操作，以下表格可以粗略地定义为 REST 所指的 <a href="https://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints" target="_blank" rel="noopener noreffer">统一接口 uniform interface</a>：</p>
<table>
<thead>
<tr>
<th style="text-align:left">URL</th>
<th style="text-align:left">Verb</th>
<th style="text-align:left">functionality</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">notes</td>
<td style="text-align:left">GET</td>
<td style="text-align:left">获取整个 resources 集合</td>
</tr>
<tr>
<td style="text-align:left">notes</td>
<td style="text-align:left">POST</td>
<td style="text-align:left">根据 request 的数据创建新 resource</td>
</tr>
<tr>
<td style="text-align:left">notes/10</td>
<td style="text-align:left">GET</td>
<td style="text-align:left">获取指定的 resource</td>
</tr>
<tr>
<td style="text-align:left">notes/10</td>
<td style="text-align:left">DELETE</td>
<td style="text-align:left">删除指定的 resource</td>
</tr>
<tr>
<td style="text-align:left">notes/10</td>
<td style="text-align:left">PUT</td>
<td style="text-align:left">根据 request 的数据修改指定的整个 resource</td>
</tr>
<tr>
<td style="text-align:left">notes/10</td>
<td style="text-align:left">PATCH</td>
<td style="text-align:left">根据 request 的数据修改指定的 resource 的部分数据</td>
</tr>
</tbody>
</table>
<p><em>REST API 可以当作为是一种约定，而非一种标准</em>，世界上大多数 REST API 都不符合 Fielding 在其论文中概述的原始标准。所以在编写 API 时要有一致性，以便系统进行合作。</p>
<h4 id="fetching-a-single-resource-获取一个单一资源">Fetching a single resource 获取一个单一资源</h4>
<p>我们约定的单个笔记的唯一地址是 <code>notes/10</code>，其中 10 是笔记的唯一 id 号。通过冒号语法为路由定义参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// 处理对应 api/notes/id 的路由，其中 id 可以为任意字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 从 request 中获得 id 参数，并将 id 更改为 number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="nx">notes</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">note</span> <span class="p">=&gt;</span> <span class="nx">note</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 笔记不存在则返回 404 状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">end</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="deleting-resources-删除资源">Deleting Resources 删除资源</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/api/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">notes</span> <span class="o">=</span> <span class="nx">notes</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">note</span> <span class="p">=&gt;</span> <span class="nx">note</span><span class="p">.</span><span class="nx">id</span> <span class="o">!==</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 返回 204 状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">204</span><span class="p">).</span><span class="nx">end</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="receiving-data-接收数据">Receiving data 接收数据</h4>
<p>向 <code>/api/notes</code> 发送 HTTP POST 请求，并以 JSON 格式在 request body 中发送新笔记的信息，需要使用到 express json-parser，它与命令 <code>app.use(express.json())</code> 一起使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">generateId</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">maxId</span> <span class="o">=</span> <span class="nx">notes</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="o">?</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">notes</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">note</span> <span class="p">=&gt;</span> <span class="nx">note</span><span class="p">.</span><span class="nx">id</span><span class="p">))</span> <span class="c1">// 使用展开语法将 notes 中所有的 id 都展开出来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">maxId</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/api/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">body</span><span class="p">.</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 return 返回 400 状态码以及错误提示并阻止代码继续执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;内容缺失&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">content</span><span class="o">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">important</span><span class="o">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">important</span> <span class="o">||</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">id</span><span class="o">:</span> <span class="nx">generateId</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">notes</span> <span class="o">=</span> <span class="nx">notes</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>像 DELETE、POST 等操作，在浏览器上不是很方便执行，使用 Postman 应用或者 VS Code REST client 插件来操作即可。</p>
<p>如果 POST 请求出现错误，需要检查 Postman 或者 REST client 插件是否将 POST 数据的 <code>Content-Type</code> 设置为 <code>application/json</code>。</p>
<h4 id="about-http-request-types">About HTTP request types</h4>
<p>HTTP 标准讨论了与请求类型相关的两个属性，安全「safety」 和 幂等性「idempotence」 。</p>
<h5 id="安全safety">安全「safety」</h5>
<p>HTTP GET 请求应该是满足安全性的：</p>
<blockquote>
<p>In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval. These methods ought to be considered &ldquo;safe&rdquo;.</p>
</blockquote>
<p>安全性意味着执行请求不能在服务器中引起任何<strong>副作用「side effect」</strong>。 副作用是指数据库的状态<strong>不能因请求而改变</strong>，响应<strong>只能</strong>返回服务器上已经存在的数据。</p>
<p>无法保证 GET 请求是安全的，这实际上是 HTTP 标准的建议。通过遵守 API 中的 RESTful 原则，GET 请求实际上总是以一种安全的方式使用。</p>
<p>HTTP 标准还定义了 <a href="https://www.w3.org/protocols/rfc2616/rfc2616-sec9.html#sec9.4" target="_blank" rel="noopener noreffer">HEAD</a>， 实际上，HEAD 应该像 GET 一样工作，但是它只返回状态码和响应头。 当您发出 HEAD 请求时，不会返回响应主体。</p>
<h5 id="幂等idempotencehttpsdevelopermozillaorgzh-cndocsglossarye5b982e7ad89"><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E5%B9%82%E7%AD%89" target="_blank" rel="noopener noreffer">幂等「idempotence」</a></h5>
<p>除了 POST 以外的所有 HTTP 请求都是幂等的，这意味着，如果一个请求有副作用，那么无论发送多少次请求，结果都应该是相同的。</p>
<blockquote>
<p>Methods can also have the property of &ldquo;idempotence&rdquo; in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request. The methods GET, HEAD, PUT and DELETE share this property.</p>
</blockquote>
<p>POST 是唯一的不安全也不幂等的 HTTP 请求类型。发送多个 POST 请求，可以产生多条内容。</p>
<h4 id="middleware-中间件">Middleware 中间件</h4>
<p>中间件是可用于处理请求和响应对象的函数。可以从请求对象中存储的请求中获取原始数据，将其解析为一个 JavaScript 对象，并将其作为一个新的属性、body 分配给请求对象。</p>
<p>可以使用多个中间件，会按照顺序一个一个地执行。</p>
<p>中间件是一个接收三个参数的函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">requestLogger</span> <span class="o">=</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Method: &#39;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Path: &#39;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Body: &#39;</span><span class="p">,</span> <span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">next</span><span class="p">()</span> <span class="c1">// 调用作为参数传递的下一个函数。 函数将控制权交给下一个中间件。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 使用方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span> <span class="c1">// 获得 body 内容，保证 requestLogger 能够得到 request.body 内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">requestLogger</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>中间件函数按照与 express 服务器对象的使用方法一起使用的顺序调用。 如果我们希望在调用路由事件处理程序之前执行路由，则必须在路由之前使用中间件函数。相反的，中间件函数放在路由之后，使中间件在没有路由处理 HTTP 请求的时候调用。</p>
<h3 id="将应用部署到网上">将应用部署到网上</h3>
<h4 id="same-origin-policy-and-cors-同源政策和-cors">Same origin policy and CORS 同源政策和 CORS</h4>
<blockquote>
<p>Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts) on a web page to be requested from another domain outside the domain from which the first resource was served. A web page may freely embed cross-origin images, stylesheets, scripts, iframes, and videos. Certain &ldquo;cross-domain&rdquo; requests, notably Ajax requests, are forbidden by default by the same-origin security policy. Cross-origin resource sharing.</p>
<p><em>—— 维基百科</em></p>
</blockquote>
<p><a href="https://developer.mozilla.org/en-us/docs/web/security/same-origin_policy" target="_blank" rel="noopener noreffer">同源策略</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener noreffer">CORS</a> 是 Web 应用的通用原则。</p>
<p>在 Node 项目中可以使用 <code>cors</code> 中间件来允许来自其他的请求。</p>
<p>通过 <code>npm install cors</code> 来安装。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cors&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">())</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="application-to-the-internet-将应用部署到网上">Application to the Internet 将应用部署到网上</h4>
<p>使用 <a href="https://www.heroku.com/" target="_blank" rel="noopener noreffer">Heroku</a> 来部署应用。</p>
<p>在项目根目录新建 <code>Procfile</code> 文件，在文件内填写 <code>web: npm start</code> 来告诉 Heroku 如何启动应用。</p>
<p>将应用的 <code>index.js</code> 中端口改为环境变量：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3001</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在应用内创建 git 仓库，并使用 git 方式或者 ssh 方式将应用部署至 Heroku 上，方法同其他 git 方式，VS code 集成了 git 功能，可以直接使用，需要注意的是，<code>git push</code> 时候，需要的是 Heroku 的 Access API 而不是用户密码。</p>
<h4 id="frontend-production-build-前端生产构建">Frontend production build 前端生产构建</h4>
<p>目前为止，应用处于开发模式中运行，简言之就是「人类可读」的环境，在部署应用时，我们需要将应用创建一个<a href="https://zh-hans.reactjs.org/docs/optimizing-performance.html#use-the-production-build" target="_blank" rel="noopener noreffer">生产构建</a>或为生产而优化的版本，也就是「机器可读」的环境。</p>
<p><code>create-react-app</code> 创建的应用可以使用 <code>npm build</code> 命令来构建。</p>
<blockquote>
<p>通过在应用根目录运行这个命令，将会创建一个名为build 的目录(其中包含应用中唯一的 HTML 文件index. HTML) ，其中包含目录 static。 应用的 JavaScript 代码的 <a href="https://en.wikipedia.org/wiki/minification_%28programming%29" target="_blank" rel="noopener noreffer">Minified</a> 版本将生成到 static 目录。 即使应用代码位于多个文件中，所有的 JavaScript 都将被缩小到一个文件中。 实际上，来自所有应用依赖项的所有代码也将缩小到这个单一文件中。</p>
</blockquote>
<h4 id="serving-static-files-from-the-backend-从后端服务部署静态文件">Serving static files from the backend 从后端服务部署静态文件</h4>
<p>将前端构建的 <code>build</code> 文件夹复制到后端应用的根目录，通过 express 的内置的 static 中间件来现实前端构建的内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当 express 收到 HTTP GET 请求时，它会首先检查 build 目录是否包含与请求地址对应的文件，并返回相应的内容。</p>
<p>这样的方式采用了前后端在一起的方式，所以可以将前端的 <code>baseUrl</code> 改成相对路径 <code>/api/notes</code> 即可。</p>
<p>在确保生产环境在本地正常之后，将生产构建 <code>git push</code> 至 Heroku 完成部署。</p>
<h4 id="streamlining-deploying-of-the-frontend-流程化前端部署">Streamlining deploying of the frontend 流程化前端部署</h4>
<p>通过更改后端 <code>package.json</code> 的 scripts 来实现流程化构建，以下直接引用了教材内容，一般来说根据项目实际情况来填写这些 scripts</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nt">&#34;build:ui&#34;</span><span class="p">:</span> <span class="s2">&#34;rm -rf build &amp;&amp; cd ../../osa2/materiaali/notes-new &amp;&amp; npm run build --prod &amp;&amp; cp -r build ../../../osa3/notes-backend/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;deploy&#34;</span><span class="p">:</span> <span class="s2">&#34;git push heroku main&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;deploy:full&#34;</span><span class="p">:</span> <span class="s2">&#34;npm run build:ui &amp;&amp; git add . &amp;&amp; git commit -m uibuild &amp;&amp; npm run deploy&#34;</span><span class="p">,</span>    
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;logs:prod&#34;</span><span class="p">:</span> <span class="s2">&#34;heroku logs --tail&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="proxy-代理">Proxy 代理</h4>
<p>在前端开发时，因为之前将 <code>baseUrl</code> 更改成后端的相对路径，所以在开发模式运行前端内容时，并不能获取到准确的为止，所以此时需要通过代理，将相对路径的请求转发至后端服务器。</p>
<p>在 <code>package.json</code> 增加 <code>proxy</code> 代理设置来转发。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;proxy&#34;</span><span class="p">:</span> <span class="s2">&#34;http://localhost:3001&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>方法的一个劣势，是前端部署的复杂程度。 部署新版本需要生成新的前端生产构建并将其复制到后端存储库。 这使得创建一个自动化的<a href="https://martinfowler.com/bliki/DeploymentPipeline.html" target="_blank" rel="noopener noreffer">部署管道</a>变得更加困难。 部署管道是指通过不同的测试和质量检查将代码从开发人员的计算机转移到生产环境的自动化控制的方法。</p>
</blockquote>
<h3 id="将数据存入-mongodb">将数据存入 MongoDB</h3>
<h4 id="debugging-node-applications-调试-node-应用">Debugging Node applications 调试 Node 应用</h4>
<p>将数据 <code>console.log</code> 到控制台是一种可靠的方法。</p>
<p>使用 VS Code 的代码调试器，在软件的 Run 菜单下选择 Add Configuration&hellip; 来配置 debug 的设置，选择代码使用的环境 Node.js 会自动生成配置文件，然后选择 Start Debugging 开始调试。</p>
<p>使用 Google Dev Tools 调试应用，在控制台使用 <code>node --inspect index.js</code> 进行调试，也可以在 Console 控制台点击 Node logo 开启。<em>系统需要全局安装 Node，如果只是在项目中安装 Node 是使用命令，也不显示 Node logo 的</em></p>
<p><strong>质疑一切，出现 bug 时，逐一排除所有的可能性，将 bug 修复后再继续编写代码。</strong></p>
<h4 id="mongodb">MongoDB</h4>
<p>MongoDB 不同于 MySQL 等其他关系数据库，它时<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E6%96%87%E6%AA%94%E7%9A%84%E6%95%B8%E6%93%9A%E5%BA%AB" target="_blank" rel="noopener noreffer">文档数据库</a>，它通常被归类为 <a href="https://zh.wikipedia.org/wiki/NoSQL" target="_blank" rel="noopener noreffer">NoSQL</a></p>
<p>使用 <a href="https://www.mongodb.com/cloud/Atlas" target="_blank" rel="noopener noreffer">MongoDB Atlas</a> 为应用提供数据存储服务，也可以在本地创建 MongoDB。</p>
<p>使用 Mongoose 库来代替 MongoDB 官方的驱动程序操作数据库会非常方便。Mongoose 可以被描述为 <code>ODM(Object Document Mapper)</code>，它可以非常简单的将 JavaScript 对象保存为 Mongo 文档。</p>
<p>在项目中使用 <code>npm install mongoose</code> 安装 Mongoose。</p>
<p>新增 <code>mongo.js</code> 用于与数据库的连接：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;请提供连接数据库的密码：node mongo.js &lt;passowrd&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="sb">`mongodb+srv://fullstack:</span><span class="si">${</span><span class="nx">password</span><span class="si">}</span><span class="sb">@cluster0-ostce.mongodb.net/test?retryWrites=true`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">url</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useNewUrlParser</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useUnifiedTopology</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useFindAndModify</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useCreateIndex</span><span class="o">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以通过修改 url 中的 test 来更改数据库名称，如果数据库中没有这个数据库，它会在连接成功后自动添加。</p>
<h4 id="schema">Schema</h4>
<p>以下定义了笔记的 <a href="http://mongoosejs.com/docs/guide.html" target="_blank" rel="noopener noreffer">Schema</a> 模式和匹配的 <a href="http://mongoosejs.com/docs/models.html" target="_blank" rel="noopener noreffer">Model</a> 模型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// mongo.js
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">noteSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">content</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">date</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">important</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">Note</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Note&#39;</span><span class="p">,</span> <span class="nx">noteSchema</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Schema 告诉 Mongoose 如何将 note 对象存储在数据库中。</p>
<blockquote>
<p>在 Note 模型定义中，第一个 &ldquo;Note&rdquo; 参数是模型的单数名。集合的名称将是小写的复数 notes，因为 Mongoose 约定是当模式以单数（例如 Note）引用集合时自动将其命名为复数（例如 notes）。</p>
<p>像 Mongo 这样的文档数据库是 schemaaless，这意味着数据库本身并不关心存储在数据库中的数据的结构。 可以在同一集合中存储具有完全不同字段的文档。</p>
<p>Mongoose 背后的思想是，存储在数据库中的数据在 application 级别上被赋予一个 schema，该模式定义了存储在任何给定集合中的文档的形状。</p>
</blockquote>
<h4 id="creating-and-saving-objects-创建和保存对象">Creating and saving objects 创建和保存对象</h4>
<p>在 Node Model 模型的帮助下，创建新的 Note 非常简单：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// mongo.js
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Note</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;新的 note&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">important</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>模型是所谓的构造函数 constructor function，它根据提供的参数创建新的 JavaScript 对象。 由于对象是使用模型的构造函数创建的，因此它们具有模型的所有属性，其中包括将对象保存到数据库的方法。</p>
</blockquote>
<p>通过 <code>save()</code> 方法来保存新的 <code>note</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// mongo.js
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">note</span><span class="p">.</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;保存成功&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 关闭数据库连接，否则程序无法完成它的执行。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="fetching-objects-from-the-database-从服务器获取对象">Fetching objects from the database 从服务器获取对象</h4>
<p>使用 <code>find()</code> 方法来获取：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// mongo.js
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Note</span><span class="p">.</span><span class="nx">find</span><span class="p">({}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">result</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">note</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>find({})</code> 方法中 <code>{}</code> 是空对象，表示没有检索条件，数据库会返回所有结果。</p>
<p><code>find({ important: true })</code> 使用这样的条件将会返回所有重要的笔记。</p>
<h4 id="backend-connected-to-a-database-后端连接到数据库">Backend connected to a database 后端连接到数据库</h4>
<p>使用与上方相同的方法，将数据库连接的代码添加到 index.js 中去，<strong>注意，若数据库密码不从 <code>process</code> 中得到，而直接保存在 <code>url</code> 中，切勿将带有密码的文件提交至 Github</strong>，并将路由调整如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">route</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/notes/&#39;</span><span class="p">,(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Note</span><span class="p">.</span><span class="nx">find</span><span class="p">({}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">notes</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">notes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果不想要返回 <code>_id</code> 和 <code>__v</code> 字段，通过 Schema 的 toJSON 方法来修改，如下：</p>
<p><strong>注意一点，mongo 的 <code>_id</code> 字段看起来像个 <code>String 类型</code>，但它其实是个对象</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">noteSchema</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;toJSON&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">transform</span><span class="o">:</span> <span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nx">returnedObject</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">returnedObject</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">returnedObject</span><span class="p">.</span><span class="nx">_id</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="c1">// _id 字段是对象，需要 toString 方法来转换成 String
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">delete</span> <span class="nx">returnedObject</span><span class="p">.</span><span class="nx">_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="nx">returnedObject</span><span class="p">.</span><span class="nx">__v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="database-configuration-into-its-own-module-数据库逻辑配置到单独的模块">Database configuration into its own module 数据库逻辑配置到单独的模块</h4>
<p>便于维护及管理，将数据库逻辑配置到单独的模块是较好的选择。</p>
<p>在项目根目录下创建 <code>models</code> 文件夹，并在该文件夹下新建 <code>note.js</code> 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URI</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;正在连接&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">url</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useNewUrlParser</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useUnifiedTopology</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useFindAndModify</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useCreateIndex</span><span class="o">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;成功连接 MongoDB&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;连接 MongoDB 失败：&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">noteSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">content</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">date</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">important</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">noteSchema</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;toJSON&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">transform</span><span class="o">:</span> <span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nx">returnedObject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">returnedObject</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">returnedObject</span><span class="p">.</span><span class="nx">_id</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="nx">returnedObject</span><span class="p">.</span><span class="nx">_id</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="nx">returnedObject</span><span class="p">.</span><span class="nx">__v</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Note&#39;</span><span class="p">,</span> <span class="nx">noteSchema</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>此处定义 <code>Note</code> modules 与定义 ES6 模块方式略有不同。</p>
<blockquote>
<p>模块的公共接口是通过将值设置为 module.exports 变量来定义的。 我们将该值设置为 Note 模型。模块内部定义的其他东西，比如变量 mongoose 和 url 对于模块的用户来说是不可访问的或者不可见的。</p>
</blockquote>
<p>在 <code>index.js</code> 中导入 <code>note</code> 模块即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">Note</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./models/note&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将数据库的 <code>url</code> 直接编入代码中不是一个安全的选择，将它设置为环境变量 <code>MONGODB_URI</code> 传递给应用会更合适。</p>
<p>定义环境变量的方式有很多种：</p>
<ul>
<li>在启动时定义。 <em>在 <code>package.json</code> 中添加 <code>scripts</code></em></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;mongodb&#34;</span><span class="err">:</span> <span class="s2">&#34;MONGODB_URI=address_here npm run dev&#34;</span><span class="err">,</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>更复杂的方法是使用 <code>dotenv</code> 库</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">npm install dotenv
</span></span></code></pre></td></tr></table>
</div>
</div><p>在项目根目录新建 <code>.env</code> 文件，环境变量在改文件内定义。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MONGODB_URI=&#39;mongodb+srv://fullstack:passwordhere@icluster.fmdqa.mongodb.net/note-app?retryWrites=true&amp;w=majority&#39;
</span></span><span class="line"><span class="cl">PORT=3001
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>.gitignore</code> 中添加 <code>.env</code> 条目来避免将环境变量上传至 github，并在 <code>index.js</code> 第一行添加 <code>require('dotenv'.config)</code> 命令来使用 <code>.env</code> 中的环境变量。引用环境变量的方法与普通环境变量一样 <code>process.env.MONGODB_URI</code>。</p>
<h4 id="using-database-in-route-handlers-在路由处理程序中使用数据库">Using database in route handlers 在路由处理程序中使用数据库</h4>
<p>添加一条新笔记：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/api/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">content</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;提交的内容缺失&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 使用 Note 构造函数创建 Note 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Note</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">content</span><span class="o">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">important</span><span class="o">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">important</span> <span class="o">||</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">note</span><span class="p">.</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">saveNote</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 操作成功时才发送 response
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">saveNote</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 mongoose 的 <code>findById</code> 方法获取单独一条笔记：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">note</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">note</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="verifying-frontend-and-backend-integration-验证前端和后端的集成">Verifying frontend and backend integration 验证前端和后端的集成</h4>
<p>使用 POSTMAN 或者其他工具来测试后端。</p>
<h4 id="error-handling-错误处理">Error handling 错误处理</h4>
<p>通过 <code>.catch</code> 方法来捕获错误。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Note</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="nx">note</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">else</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">end</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">end</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当请求指定 id 的笔记不存在时，服务器会返回 404 错误，当给出的 id 是一个奇怪的参数时， <code>findById</code> 方法会抛出一个错误，导致 <code>Promise</code> 返回 <code>rejected</code>，因此会触发 <code>catch</code> 代码中的函数，也就是 <em>500 internal server error</em>。</p>
<p>实际上当 id 格式不正确会触发 <code>catch</code> 的代码，那么将这个错误定义为 <code>400 bad request</code> 比较符合对错误的描述。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;请求错误，id 格式不正确&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>调用错误处理程序的原因可能与您预期的完全不同。 如果您将错误记录到控制台，您可以避免冗长和令人沮丧的调试会话。</p>
</blockquote>
<h4 id="moving-error-handling-into-middleware-将错误处理移入中间件">Moving error handling into middleware 将错误处理移入中间件</h4>
<p>上述代码是在单个路由内编写了错误处理程序，这是一种方法。在单个位置实现所有的错误处理，是一个比较好的方法。</p>
<blockquote>
<p>如果我们以后想要将与错误相关的数据报告给外部的错误跟踪系统，比如 <a href="https://sentry.io/welcome/" target="_blank" rel="noopener noreffer">Sentry</a>，那么这么做就特别有用。</p>
</blockquote>
<p>在路由中，使用 <code>next</code> 函数向下传递错误，<code>next</code> 函数作为第三个参数传递给处理程序。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Note</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">note</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">end</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="nx">next</span><span class="p">(</span><span class="nx">error</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>将向前传递的错误作为参数给 <code>next</code> 函数。 如果在没有参数的情况下调用 <code>next</code>，那么执行将简单地转移到下一个路由或中间件上。 如果使用参数调用  <code>next</code> 函数，那么执行将继续到 error 处理程序中间件。</p>
</blockquote>
<p>Express 的 <code>errorHandler</code> 是一种中间件，它定义了一个接受 4 个参数的函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">errorHandler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;CastError&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">error</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="s1">&#39;ObjectId&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;请求错误，id 格式不正确&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">next</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">errorHandler</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>errorHandler</code> 将会检查错误是否是 <em>CastError</em> 错误以及种类是否是 <em>ObjectId</em>，如果是将会返回 400 错误以及错误消息。如果不是，中间件将会转发错误至缺省的 Express 错误处理程序。</p>
<h4 id="the-order-of-middleware-loading-中间件加载的顺序">The order of middleware loading 中间件加载的顺序</h4>
<p>中间件的执行顺序与通过 <code>app.use</code> 函数加载到 Express 顺序相同*「自上而下」*。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">logger</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;api/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">unknownEndpoint</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;访问的页面不存在&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 访问不存在页面的处理程序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">unknownEndpoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">errorHandler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">errorHandler</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果 <code>app.use(express.json())</code> 放在了 <code>app.post</code> 路由下面，那么 <code>express.json()</code> 将会在路由之后执行，这意味着 <code>app.post</code> 中的 <code>body</code> 无法正确地获得数据，因为 <code>req.body</code> 是 undefined。</p>
<h4 id="other-operations-其他操作">Other operations 其他操作</h4>
<p><code>findByIdAndRemove</code> 方法及 <code>findByIdAndUpdate</code> 方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/api/notes/:id&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">note</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">content</span><span class="o">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">important</span><span class="o">:</span> <span class="nx">body</span><span class="p">.</span><span class="nx">important</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">Note</span><span class="p">.</span><span class="nx">findByIdAndUpdate</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">note</span><span class="p">,</span> <span class="p">{</span> <span class="k">new</span><span class="o">:</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">updatedNote</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">updatedNote</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="p">=&gt;</span> <span class="nx">next</span><span class="p">(</span><span class="nx">error</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>findByIdAndUpdate</code> 方法中使用了可选参数 <code>{ new: true }</code>，这样 <code>updateedNote</code> 接收到的是修改后的文档。默认情况下 <code>updatedNote</code> 接收到的是原始未修改的文档。这点要注意。</p>
<h3 id="eslint-与代码检查">ESLint 与代码检查</h3>
<p>先前在路由中检查笔记的有效性，如果没有数据，将返回 400 错误信息以及错误信息「提交的内容缺失」：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/api/notes&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">content</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;提交的内容缺失&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在数据存储到数据库之前验证数据的一个更好的方法是使用 mongoose 提供的 <a href="https://mongoosejs.com/docs/validation.html" target="_blank" rel="noopener noreffer">validation</a> 功能。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">noteSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">content</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>   <span class="c1">// 字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">minLength</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>   <span class="c1">// 最小长度 5 字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span>  <span class="c1">// 必填
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">date</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>     <span class="c1">// 日期
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span>  <span class="c1">// 必填
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">important</span><span class="o">:</span> <span class="nb">Boolean</span>  <span class="c1">// 布尔值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>minlength 和 required 验证器是内置的 ，由 Mongoose 提供。如果没有一个内置的验证器满足我们的需求的话，Mongoose 允许我们创建新的验证器自定义验证器。</p>
</blockquote>
<p>在 <code>errorHandler</code> 中间件增加 <code>validation</code> 的判断：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">errorHandler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;CastError&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="s1">&#39;ObjectId&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="s1">&#39;error id&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;ValidationError&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="promise-chaining-承诺链">Promise chaining 承诺链</h4>
<p>教材所讲的是承诺链的概念，所用的案例并不是很典型，引用作者的话：</p>
<blockquote>
<p>在这个例子中，承诺链没有提供多少好处。 但要是有许多必须按顺序进行的异步操作，情况就会发生变化……在本课程的下一章节中，我们将学习 JavaScript 中的async/await 语法，这将使编写后续的异步操作变得容易得多。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">note</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nx">then</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nx">then</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nx">then</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="k">catch</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>.then</code> 返回了一个 <code>Promise</code>，通过多个 <code>.then</code> 方法组成了 <code>Promise Chaining</code>。</p>
<p>如同 then 的字面意思，代码是依次执行的。</p>
<h4 id="deploying-the-database-backend-to-production-将数据库后端部署到生产环境">Deploying the database backend to production 将数据库后端部署到生产环境</h4>
<p>略</p>
<h4 id="lint">Lint</h4>
<p>Lint 是什么？</p>
<blockquote>
<p>Generically, lint or a linter is any tool that detects and flags errors in programming languages, including stylistic errors. The term lint-like behavior is sometimes applied to the process of flagging suspicious language usage. Lint-like tools generally perform static analysis of source code.</p>
<p>通常，lint 或 linter 是检测和标记编程语言中的错误，包括文本错误的一种工具。 lint-like 这个术语有时用于标记可疑的语言使用情况。 类似 lint 的工具通常对源代码执行静态分析。</p>
</blockquote>
<blockquote>
<p>在像 Java 这样的编译静态类型语言中，像 NetBeans 这样的 IDE 可以指出代码中的错误，甚至那些不仅仅是编译错误的错误。 执行静态分析的额外工具，如检查样式 ，可以用来扩展 IDE 的功能，也指出与样式有关的问题，如缩进。</p>
</blockquote>
<blockquote>
<p>在 JavaScript 的世界里，目前主要的静态分析工具又名 「linting」是 <a href="https://eslint.org/" target="_blank" rel="noopener noreffer">ESlint</a>。</p>
</blockquote>
<p>安装 ESlint 作为开发依赖：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">npm install eslint --save-dev
</span></span></code></pre></td></tr></table>
</div>
</div><p>初始化默认设置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">node_modules/.bin/eslint --init
</span></span></code></pre></td></tr></table>
</div>
</div><figure>
</figure>

<p>该配置将保存在 <code>.eslintrc.js</code> 文件中。</p>
<p>可根据习惯修改规则，比如使用 2 个 space。</p>
<p>检查验证方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">node_modules/.bin/eslint index.js
</span></span></code></pre></td></tr></table>
</div>
</div><p>为 linting 创建一个单独的脚本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;start&#34;</span><span class="p">:</span> <span class="s2">&#34;node index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;dev&#34;</span><span class="p">:</span> <span class="s2">&#34;nodemon index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nt">&#34;lint&#34;</span><span class="p">:</span> <span class="s2">&#34;eslint .&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在根目录新建 <code>.eslintignore</code> 并增加想要忽略检查的文件。</p>
<p>安装 <code>eslint-plugin</code> 来替代使用命令检查代码中的错误，ESlint 插件会将不符合规则的代码使用红色波浪线标记出来。</p>
<p>ESlint 有大量的<a href="https://eslint.org/docs/rules/" target="_blank" rel="noopener noreffer">规则</a>， 通过在 <code>.eslintrc.js</code> 文件中编辑增加规则即可。</p>
<blockquote>
<p>许多公司定义了通过 ESlint 配置文件在整个组织中执行的编码标准。 建议不要一遍又一遍地使用重造轮子，从别人的项目中采用现成的配置到自己的项目中可能是一个好主意。 最近，很多项目都采用了 Airbnb 的 Javascript 风格指南，使用了 Airbnb 的 <a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb" target="_blank" rel="noopener noreffer">ESlint</a> 。</p>
</blockquote>]]></description>
</item></channel>
</rss>
